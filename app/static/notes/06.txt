socket 套接字编程

目的 ： 通过编程语言提供的套接字编程接口，可以更简单的完成基于tcp和udp的编程

套接字 ： 完成上述目标的一种编程手段

套接字类别

流式套接字（SOCK_STREAM）：传输层基于tcp的协议通信
       面向连接可靠的传输   tcp的传输   流式套接字

数据报套接字（SOCK_DGRAM）： 传输层基于udp协议传输
   面向无连接不可靠的传输   udp的传输   数据报套接字

底层套接字 （SOCK_RAM）: 访问底层协议套接字


TCP的服务端

import socket

1. 创建套接字

socket.socket(sock_family = AF_INET,
              sock_type = SOCK_STREAM,
        proto = 0)
功能 ： 创建套接字
参数 ： sock_family  地址族类型 AF_INET ipv4网络通信
        sock_type   套接字类型  SOCK_STREAM 流式
                          SOCK_DGRAM  数据报
  proto  通常为0  选定子协议类型
返回值 ： 返回套接字对象

2. 绑定地址

sockfd.bind(addr)
功能 ： 绑定地址
参数 ： addr  ---》 元组 （ip,port） ('0.0.0.0',1234)

3. 设置监听套接字

sockfd.listen(n)
功能： 将套接字设置为监听套接字，创建监听队列
参数： 监听队列大小

* 一个监听套接字可以连接多个客户端

4. 等待接受客户端连接

connfd,addr = sockfd.accept()
功能 ： 阻塞等待处理客户端连接
返回值 ： connfd  新的套接字，用于和客户端通信
          addr  连接的客户端的地址 （ip,port）


* 阻塞函数 ： 当程序运行到阻塞函数位置，如果某种条件没有达成则暂停程序运行，知道条件达成结束阻塞

5. 消息的收发

data = connfd.recv(buffersize)
功能 ： 接受消息
参数 ： 一次接受消息的大小  字节
返回值 ： 返回接受到的内容

n = connfd.send(data)
功能 ： 发送消息
参数 ： 要发送的内容 （bytes格式）
返回值 ： 返回实际发送的字节数

6. 关闭套接字

sockfd.close()

* telnet  ip   port

客户端

1. 创建套接字 （和服务端套接字类型相同）
2. 发起连接
connect（addr）
功能 ： 向服务端发起连接
参数 ： 服务端地址   元组

3. 消息收发
4. 关闭套接字

简单的服务端代码

    from socket import *

    #创建套接字
    sockfd = socket(AF_INET,SOCK_STREAM)

    #绑定地址
    sockfd.bind(('127.0.0.1',8888))

    #设置监听
    sockfd.listen(5)

    #等待客户端连接
    print("Waiting for connect...")
    connfd,addr = sockfd.accept()
    print("Connect from",addr)

    #消息收发
    data = connfd.recv(1024)
    print("Receive:",data.decode())

    n = connfd.send(b"Receive your message")
    print("send %d bytes"%n)

    #关闭套接字
    connfd.close()
    sockfd.close()


    from socket import *

    #创建套接字
    sockfd = socket()

    #发起连接
    sockfd.connect(('127.0.0.1',8888))

    #消息收发
    msg = input("Msg>>")
    sockfd.send(msg.encode())

    data = sockfd.recv(1024)
    print(data.decode())

    sockfd.close()


客户端代码

    from socket import *

    #创建套接字
    sockfd = socket()

    #发起连接
    sockfd.connect(('127.0.0.1',8888))

    #消息收发
    msg = input("Msg>>")
    sockfd.send(msg.encode())

    data = sockfd.recv(1024)
    print(data.decode())

    sockfd.close()