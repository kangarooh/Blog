Python中列表详解及使用

列表 list
  列表的定义：
    1. 列表是一种容器(通常用来存储计算机的数据对象)
    2. 列表是可以被改变的序列
    3. 列表是由一系列特定元素组成的，元素与元素之间可能没有任何的关联关系，但他们之间有先后顺序关系

创建空列表的字面值方式
  L = []    # L绑定空列表

列表的in / not in 运算符:
  判断一个元素是否存在于列表中,如果存在返回True,否则返回 False
  in 和 not in 的返回值相反

列表的索引赋值
    列表是可变的序列，可以通过索引赋值改变列表中的元素
    语法:
      列表[整数表达式] = 表达式

列表的切片
   列表[:]
   列表[::]
   列表的切片取值返回一个列表,规则等同于字符串的切片规则
  例如:
    L = [0, 1, 2, 3, 4, 5, 6, 7, 8]
    L2 = L[1::2]  # L2 = [1, 3, 5, 7]

列表的切片赋值:
    作用:
      可以改变原列表的排列，可以插入和修改数据
      可以用切片改变列表对应的元素的值
    语法:
      列表[切片slice] = 可迭代对象
    说明:
      赋值运算符的右侧必须是一个可迭代对象
    示例:
      L = [2, 3, 4]
      L[0:1] = [1.1, 2.2]  # L = [1.1, 2.2, 3, 4]

列表中常用的方法(method)
  详见:
    >>> help(list)

参考如下：
        方法	                                        意义
L.index(v [, begin[, end]])	     返回对应元素的索引下标, begin为开始索引，end为结束索引                                ,当 value 不存在时触发ValueError错误

L.insert(index, obj)	         将某个元素插放到列表中指定的位置

L.count(x)	                     返回列表中元素的个数

L.remove(x)	                     从列表中删除第一次出现在列表中的值

L.copy()	                     复制此列表（只复制一层，不会复制深层对象)

L.append(x)	                     向列表中追加单个元素

L.extend(lst)	                 向列表追加另一个列表

L.clear()	                     清空列表,等同于 L[:] = []

L.sort(reverse=False)	         将列表中的元素进行排序，默认顺序按值的小到大的顺序排列

L.reverse()	                     列表的反转，用来改变原列表的先后顺序

L.pop([index])	                 删除索引对应的元素，如果不加索引，默认删除最后元素，同
                                 时返回删除元素的引用关系


